'''
Creation: 2014/01/29

Author: Tony.Yang
'''


# _*_ coding:utf-8 _*_


import xlrd
import lxml.etree as XML
import time


###############################################################################
## Constant variables                                                        ##
###############################################################################
APN_XLS_FILE_NAME     = "qisda_apn_table.xls"
APN_XLS_SHEET_NAME    = "Global_APN_Table"
APN_XLS_FILE_VERSION  = "7"
APN_XML_FILE_NAME     = "qisda_apn_conf.xml"
APN_XML_FILE_COMMENTS = '''
    ***********************************************************************************
    **                             Qisda APN Table                                   **
    **===============================================================================**
    **                                                                               **
    ** WARNING!! Do not modify this file, which was generated by tool.               **
    **                                                                               **
    ** This XML file is used in Android platform.                                    **
    **                                                                               **
    ** And the generator tool is designed and implemented by Qisda Suzhou team.      **
    **                                                                               **
    ***********************************************************************************
    
    '''


###############################################################################
## QAG_ApnGenerator class                                                    ##
###############################################################################
class QAG_ApnXmlGenerator:
    def __init__(self, pApnRecordContainer, pApnVersion):
        self.mApnRecordContainer = pApnRecordContainer
        self.mApnVersion = pApnVersion
        
    def genApnRecord(self):
        print "[Qisda APN Generator] APN record generation will start soon!!\n"
        time.sleep(5)
        
        tApnRecordRootNode = XML.Element("apns")
        tApnRecordRootNode.set("version", self.mApnVersion)
        
        tApnRecordRootNode.append(XML.Comment(APN_XML_FILE_COMMENTS))

        tApnRecordNum = 0
        for tApnRecord in self.mApnRecordContainer:
            tApnRecordNum = tApnRecordNum + 1
            print "\n[Qisda APN Generator] Generate No.%d APN record..." %tApnRecordNum
            
            tApnRecordNode = XML.SubElement(tApnRecordRootNode, "apn")
            for tApnRecordField in tApnRecord:
                tApnRecordNode.set(tApnRecordField[0], tApnRecordField[1])
            
        self.mXmlElements = tApnRecordRootNode
        print "\n[Qisda APN Generator] APN record generation completed, total %d records generated!!\n" %tApnRecordNum

    def genApnXmlFile(self):
        print "[Qisda APN Generator] APN XML file generation will start soon!!\n"
        time.sleep(5)
        tXmlElementTree = XML.ElementTree(self.mXmlElements)
        tXmlElementTree.write(APN_XML_FILE_NAME, pretty_print = True, xml_declaration = True, encoding = "utf-8") 
        print "[Qisda APN Generator] APN XML file generation completed!!\n"


###############################################################################
## QAG_XmlGenerator class                                                    ##
###############################################################################
class QAG_ApnXlsParser:
    def __init__(self, pApnXlsFileName, pApnSheetName):
        self.mApnXlsFileName = pApnXlsFileName
        self.mApnSheetName = pApnSheetName
        self.mApnRecordContainer = []
    
    ##=======================================================================##
    ## APN record fields:                                                    ##
    ## - carrier, apn, mcc, mnc                                              ##
    ## - user, password, server, proxy, port                                 ##
    ## - mmsc, mmsproxy, mmsport                                             ##
    ## - authtype                                                            ##
    ## - mvnotype, mvnodata                                                  ##
    ##=======================================================================##
    def parseXls(self):
        print "[Qisda APN Generator] APN XLS file parsing will start soon!!\n"
        time.sleep(5)
        
        mApnXlsFile = xlrd.open_workbook(self.mApnXlsFileName)
        print "[Qisda APN Generator] Qisda APN XLS file (%s) loading... OK!!\n" % self.mApnXlsFileName
        
        mApnSheet = mApnXlsFile.sheet_by_name(self.mApnSheetName)
        print "[Qisda APN Generator] Qisda APN XLS sheet (%s) loading... OK!!!\n" % self.mApnSheetName
        
        mLastRow = 0
        
        for iRow in range(5, mApnSheet.nrows):
            print "[Qisda APN Generator] Parsing No.%d line record...\n" %(iRow + 1)
            apnrecord = []
            carrier   = []
            apn       = []
            mcc       = []
            mnc       = []
            user      = []
            password  = []
            server    = []
            proxy     = []
            port      = []
            mmsc      = []
            mmsproxy  = []
            mmsport   = []
            apntype   = []
            authtype  = []
            mvnotype  = []
            mvnodata  = []
            ##===============================================================##
            ## Parse fields in APN record                                    ##
            ##===============================================================##
            for iCol in range(mApnSheet.ncols):
                ##===========================================================##
                ## Parse "carrier" field                                     ##
                ##===========================================================##
                if mApnSheet.cell_value(0, iCol) == "IAPName":
                    if mApnSheet.cell_value(iRow, iCol) == "":
                        break;
                    else:
                        carrier.append("carrier")
                        if type(mApnSheet.cell_value(iRow, iCol)) == float:
                            carrier.append(str(mApnSheet.cell_value(iRow, iCol))[0:-2])
                        else:
                            carrier.append(mApnSheet.cell_value(iRow, iCol))
                ##===========================================================##
                ## Parse "apn" field                                         ##
                ##===========================================================##
                elif mApnSheet.cell_value(0, iCol) == "APN":
                    apn.append("apn")
                    apn.append(mApnSheet.cell_value(iRow, iCol))
                ##===========================================================##
                ## Parse "mcc" and "mnc" fields                              ##
                ##===========================================================##
                elif mApnSheet.cell_value(0, iCol) == "NetworkId":
                    mcc.append("mcc")
                    mcc.append(str(mApnSheet.cell_value(iRow, iCol))[0:3])
                    mnc.append("mnc")
                    mnc.append(str(mApnSheet.cell_value(iRow, iCol))[3:-2])
                ##===========================================================##
                ## Parse "user" field                                        ##
                ##===========================================================##
                elif mApnSheet.cell_value(0, iCol) == "UserName":
                    user.append("user")
                    user.append(str(mApnSheet.cell_value(iRow, iCol)))
                ##===========================================================##
                ## Parse "server" field                                      ##
                ##===========================================================##
                elif mApnSheet.cell_value(0, iCol) == "Server":
                    server.append("server")
                    server.append(mApnSheet.cell_value(iRow, iCol))
                ##===========================================================##
                ## Parse "password" field                                    ##
                ##===========================================================##
                elif mApnSheet.cell_value(0, iCol) == "Password":
                    password.append("password")
                    password.append(str(mApnSheet.cell_value(iRow, iCol)))
                ##===========================================================##
                ## Parse "proxy" field                                       ##
                ##===========================================================##
                elif mApnSheet.cell_value(0, iCol) == "Proxy":
                    proxy.append("proxy")
                    proxy.append(str(mApnSheet.cell_value(iRow, iCol)))
                ##===========================================================##
                ## Parse "port" field                                        ##
                ##===========================================================##
                elif mApnSheet.cell_value(0, iCol) == "Port":
                    port.append("port")
                    port.append(str(mApnSheet.cell_value(iRow, iCol))[:-2])
                ##===========================================================##
                ## Parse "mmsproxy" field                                    ##
                ##===========================================================##
                elif mApnSheet.cell_value(0, iCol) == "MMSProxy":
                    mmsproxy.append("mmsproxy")
                    mmsproxy.append(str(mApnSheet.cell_value(iRow, iCol)))
                ##===========================================================##
                ## Parse "mmsport" field                                     ##
                ##===========================================================##
                elif mApnSheet.cell_value(0, iCol) == "MMSPort":
                    mmsport.append("mmsport")
                    mmsport.append(str(mApnSheet.cell_value(iRow, iCol))[:-2])
                ##===========================================================##
                ## Parse "mmsc" field                                        ##
                ##===========================================================##
                elif mApnSheet.cell_value(0, iCol) == "MMSC":
                    mmsc.append("mmsc")
                    mmsc.append(mApnSheet.cell_value(iRow, iCol))
                ##===========================================================##
                ## Parse "type" field                                        ##
                ##===========================================================##
                elif mApnSheet.cell_value(0, iCol) == "DefaultApnType" and mApnSheet.cell_value(iRow, iCol) == 1:
                    if len(apntype) == 0:
                        apntype.append("type")
                        apntype.append("default")
                    else:
                        apntype[1] = apntype[1] + "," + "default"
                elif mApnSheet.cell_value(0, iCol) == "MmsApnType" and mApnSheet.cell_value(iRow, iCol) == 1:
                    if len(apntype) == 0:
                        apntype.append("type")
                        apntype.append("mms")
                    else:
                        apntype[1] = apntype[1] + "," + "mms"

                elif mApnSheet.cell_value(0, iCol) == "SuplApnType" and mApnSheet.cell_value(iRow, iCol) == 1:
                    if len(apntype) == 0:
                        apntype.append("type")
                        apntype.append("supl")
                    else:
                        apntype[1] = apntype[1] + "," + "supl"
                elif mApnSheet.cell_value(0, iCol) == "DunApnType" and mApnSheet.cell_value(iRow, iCol) == 1:
                    if len(apntype) == 0:
                        apntype.append("type")
                        apntype.append("dun")
                    else:
                        apntype[1] = apntype[1] + "," + "dun"
                elif mApnSheet.cell_value(0, iCol) == "HipriApnType" and mApnSheet.cell_value(iRow, iCol) == 1:
                    if len(apntype) == 0:
                        apntype.append("type")
                        apntype.append("hipri")
                    else:
                        apntype[1] = apntype[1] + "," + "hipri"
                elif mApnSheet.cell_value(0, iCol) == "FotaApnType" and mApnSheet.cell_value(iRow, iCol) == 1:
                    if len(apntype) == 0:
                        apntype.append("type")
                        apntype.append("fota")
                    else:
                        apntype[1] = apntype[1] + "," + "fota"
                elif mApnSheet.cell_value(0, iCol) == "ImsApnType" and mApnSheet.cell_value(iRow, iCol) == 1:
                    if len(apntype) == 0:
                        apntype.append("type")
                        apntype.append("ims")
                    else:
                        apntype[1] = apntype[1] + "," + "ims"
                elif mApnSheet.cell_value(0, iCol) == "CbsApnType" and mApnSheet.cell_value(iRow, iCol) == 1:
                    if len(apntype) == 0:
                        apntype.append("type")
                        apntype.append("cbs")
                    else:
                        apntype[1] = apntype[1] + "," + "cbs"
                elif mApnSheet.cell_value(0, iCol) == "DmApnType" and mApnSheet.cell_value(iRow, iCol) == 1:
                    if len(apntype) == 0:
                        apntype.append("type")
                        apntype.append("dm")
                    else:
                        apntype[1] = apntype[1] + "," + "dm"
                elif mApnSheet.cell_value(0, iCol) == "WapApnType" and mApnSheet.cell_value(iRow, iCol) == 1:
                    if len(apntype) == 0:
                        apntype.append("type")
                        apntype.append("wap")
                    else:
                        apntype[1] = apntype[1] + "," + "wap"
                elif mApnSheet.cell_value(0, iCol) == "NetApnType" and mApnSheet.cell_value(iRow, iCol) == 1:
                    if len(apntype) == 0:
                        apntype.append("type")
                        apntype.append("net")
                    else:
                        apntype[1] = apntype[1] + "," + "net"
                elif mApnSheet.cell_value(0, iCol) == "CmmailApnType" and mApnSheet.cell_value(iRow, iCol) == 1:
                    if len(apntype) == 0:
                        apntype.append("type")
                        apntype.append("cmmail")
                    else:
                        apntype[1] = apntype[1] + "," + "cmmail"
                elif mApnSheet.cell_value(0, iCol) == "TetheringApnType" and mApnSheet.cell_value(iRow, iCol) == 1:
                    if len(apntype) == 0:
                        apntype.append("type")
                        apntype.append("tethering")
                    else:
                        apntype[1] = apntype[1] + "," + "tethering"
                elif mApnSheet.cell_value(0, iCol) == "RcseApnType" and mApnSheet.cell_value(iRow, iCol) == 1:
                    if len(apntype) == 0:
                        apntype.append("type")
                        apntype.append("rcse")
                    else:
                        apntype[1] = apntype[1] + "," + "rcse"
                ##===========================================================##
                ## Parse "auth type" field                                   ##
                ##===========================================================##
                elif mApnSheet.cell_value(0, iCol) == "AuthType":
                    authtype.append("authtype")
                    authtype.append(str(mApnSheet.cell_value(iRow, iCol))[0:-2])
                ##===========================================================##
                ## Parse "mvno type" field                                   ##
                ##===========================================================##
                elif mApnSheet.cell_value(0, iCol) == "MvnoType":
                    if not (mApnSheet.cell_value(iRow, iCol) == ""):
                        mvnotype.append("mvno_type")
                        mvnotype.append(mApnSheet.cell_value(iRow, iCol))
                ##===========================================================##
                ## Parse "mvno data" field                                   ##
                ##===========================================================##
                elif mApnSheet.cell_value(0, iCol) == "MvnoData":
                    mvnodata.append("mvno_match_data")
                    if type(mApnSheet.cell_value(iRow, iCol)) == float:
                        mvnodata.append(str(mApnSheet.cell_value(iRow, iCol))[0:-2])
                    else:
                        mvnodata.append(mApnSheet.cell_value(iRow, iCol))
                ##===========================================================##
                ## Invalid field                                             ##
                ##===========================================================##
                else:
                    mLastRow = iRow

            if not (len(carrier) == 0):
                apnrecord.append(carrier)
                apnrecord.append(apn)
                apnrecord.append(mcc)
                apnrecord.append(mnc)
                apnrecord.append(user)
                apnrecord.append(password)
                apnrecord.append(server)
                apnrecord.append(proxy)
                apnrecord.append(port)
                apnrecord.append(mmsc)
                apnrecord.append(mmsproxy)
                apnrecord.append(mmsport)
                apnrecord.append(apntype)
                apnrecord.append(authtype)
                
                if not (len(mvnotype) == 0):
                    apnrecord.append(mvnotype)
                    apnrecord.append(mvnodata)
                
                self.mApnRecordContainer.append(apnrecord)
        
        print "[Qisda APN Generator] Total %d lines parsed!!\n" %(mLastRow - 4)
        
        return self.mApnRecordContainer


###########################################################
## Program entry                                         ##
###########################################################
if __name__ == "__main__":
    print "\n"
    
    print "Please check APN table version, default version is 7.\n"
    tApnVersion = raw_input("Press Enter key to input new version or use default version: ")
    if tApnVersion == "":
        tApnVersion = APN_XLS_FILE_VERSION
        
    print "\n"
    
    tStartTime = time.time()
    
    mApnXlsParser = QAG_ApnXlsParser(APN_XLS_FILE_NAME, APN_XLS_SHEET_NAME)
    mApnRecordContainer = mApnXlsParser.parseXls()
    
    mApnXmlGenerator = QAG_ApnXmlGenerator(mApnRecordContainer, tApnVersion)
    mApnXmlGenerator.genApnRecord()
    mApnXmlGenerator.genApnXmlFile()
    
    tEndTime = time.time()
    print "[Qisda APN Generator] Generation completed, time: %d seconds!!\n" %(tEndTime - tStartTime) 
